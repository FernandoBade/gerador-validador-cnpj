{"version":3,"file":"processar-html.js","sourceRoot":"","sources":["../../../src/processos/processar-html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;GAGG;AACH,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAE3B;;GAEG;AACH,SAAS,cAAc,CAAC,SAAiB,EAAE,WAAqB,EAAE;IAChE,KAAK,MAAM,OAAO,IAAI,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QACzE,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YACpF,SAAS;QACX,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,OAAO,CAAC,WAAW,EAAE;YAAE,cAAc,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;aAChE,IAAI,OAAO,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9F,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAS,aAAa,CAAC,QAAgB;IACrC,IAAI,IAAI,GAAG,QAAQ,CAAC;IAEpB,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAU,EAAE;QACrD,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxD,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAC/D,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,YAAY,KAAK,CAAC,CAAC;YAAE,OAAO,GAAG,CAAC;QAEpC,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAG,OAAO;aACvB,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;aACvB,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAE7E,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1E,OAAO,GAAG,IAAI,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;IACtC,CAAC,CAAC;IAEF,uDAAuD;IACvD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,kDAAkD,EAAE,EAAE,CAAC,CAAC;IAC5E,IAAI,GAAG,IAAI,CAAC,OAAO,CACjB,sEAAsE,EACtE,8DAA8D,CAC/D,CAAC;IAEF,sDAAsD;IACtD,IAAI,GAAG,IAAI,CAAC,OAAO,CACjB,wDAAwD,EACxD,2CAA2C,CAC5C,CAAC;IAEF,mDAAmD;IACnD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,oDAAoD,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAC9F,IAAI,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QACxC,IAAI,qEAAqE,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QAC9F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QAErC,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;QACrD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QACtD,OAAO,UAAU,YAAY,GAAG,SAAS,QAAQ,QAAQ,IAAI,IAAI,YAAY,CAAC;IAChF,CAAC,CAAC,CAAC;IAEH,0EAA0E;IAC1E,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,yCAAyC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;QACpF,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QAEtC,MAAM,SAAS,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7C,OAAO,QAAQ,GAAG,GAAG,SAAS,SAAS,SAAS,IAAI,IAAI,GAAG,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,gDAAgD;IAChD,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9C,IAAI,GAAG,IAAI,CAAC,OAAO,CACjB,cAAc,EACd,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CACX,QAAQ,KAAK,2LAA2L,CAC3M,CAAC;IACJ,CAAC;IAED,0DAA0D;IAC1D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACtC,MAAM,QAAQ,GAAG;;;;;;;;;;;;cAYP,CAAC;QACX,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,QAAQ,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;GAEG;AACH,SAAS,QAAQ;IACf,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;QAC/B,MAAM,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,KAAK,KAAK,MAAM,EAAE,CAAC;YACrB,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAC1C,SAAS,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;AACnE,CAAC;AAED,QAAQ,EAAE,CAAC","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\n/**\n * Define a raiz do projeto a partir do diretório atual de execução.\n * Isso garante compatibilidade tanto no src quanto no dist.\n */\nconst raiz = process.cwd();\n\n/**\n * @summary Percorre o diretório recursivamente e retorna todos os arquivos HTML encontrados.\n */\nfunction listarArquivos(diretorio: string, arquivos: string[] = []): string[] {\n  for (const entrada of fs.readdirSync(diretorio, { withFileTypes: true })) {\n    if ([\"node_modules\", \"dist\"].includes(entrada.name) || entrada.name.startsWith(\".git\"))\n      continue;\n    const caminhoCompleto = path.join(diretorio, entrada.name);\n    if (entrada.isDirectory()) listarArquivos(caminhoCompleto, arquivos);\n    else if (entrada.isFile() && entrada.name.endsWith(\".html\")) arquivos.push(caminhoCompleto);\n  }\n  return arquivos;\n}\n\n/**\n * @summary Processa o conteúdo HTML aplicando minificações e atualizações.\n */\nfunction processarHtml(conteudo: string): string {\n  let html = conteudo;\n\n  const limparParametrosVersao = (url: string): string => {\n    const hashIndex = url.indexOf(\"#\");\n    const hash = hashIndex >= 0 ? url.slice(hashIndex) : \"\";\n    const semHash = hashIndex >= 0 ? url.slice(0, hashIndex) : url;\n    const interrogacao = semHash.indexOf(\"?\");\n    if (interrogacao === -1) return url;\n\n    const base = semHash.slice(0, interrogacao);\n    const parametros = semHash\n      .slice(interrogacao + 1)\n      .split(\"&\")\n      .filter((parametro) => parametro.trim() !== \"\" && !/^v=/i.test(parametro));\n\n    const novaQuery = parametros.length > 0 ? `?${parametros.join(\"&\")}` : \"\";\n    return `${base}${novaQuery}${hash}`;\n  };\n\n  // Remove Tailwind inline e substitui por CSS compilado\n  html = html.replace(/<script>\\s*tailwind\\.config[\\s\\S]*?<\\/script>/gim, \"\");\n  html = html.replace(\n    /<script[^>]*src=\"https:\\/\\/cdn\\.tailwindcss\\.com\"[^>]*><\\/script>/gim,\n    '<link rel=\"stylesheet\" href=\"/dist/assets/tailwind.min.css\">',\n  );\n\n  // Atualiza controle-tema.css para a versão minificada\n  html = html.replace(\n    /href=\"(?:\\.{1,2}\\/)*src\\/estilos\\/controle-tema\\.css\"/g,\n    'href=\"/dist/assets/controle-tema.min.css\"',\n  );\n\n  // Adiciona defer e versionamento em scripts locais\n  html = html.replace(/<script([^>]*?)src=\"([^\"]*?)\"([^>]*)><\\/script>/gim, (m, pre, src, post) => {\n    if (/^https?:\\/\\//i.test(src)) return m;\n    if (/googletagmanager\\.com|googlesyndication\\.com|cdn\\.tailwindcss\\.com/i.test(src)) return m;\n    if (!/\\/dist\\//i.test(src)) return m;\n\n    const temDefer = /\\bdefer\\b/i.test(pre) || /\\bdefer\\b/i.test(post);\n    const srcLimpo = limparParametrosVersao(src);\n    const preCorrigido = temDefer ? pre : `${pre} defer`;\n    const separador = /\\s$/.test(preCorrigido) ? \"\" : \" \";\n    return `<script${preCorrigido}${separador}src=\"${srcLimpo}\"${post}></script>`;\n  });\n\n  // Remove parâmetros de versão remanescentes em links apontando para /dist\n  html = html.replace(/<link([^>]*?)href=\"([^\"]*?)\"([^>]*)>/gim, (m, pre, href, post) => {\n    if (/^https?:\\/\\//i.test(href)) return m;\n    if (!/\\/dist\\//i.test(href)) return m;\n\n    const hrefLimpo = limparParametrosVersao(href);\n    const separador = /\\s$/.test(pre) ? \"\" : \" \";\n    return `<link${pre}${separador}href=\"${hrefLimpo}\"${post}>`;\n  });\n\n  // Adiciona metatags para evitar cache agressivo\n  if (!/http-equiv=\"Cache-Control\"/i.test(html)) {\n    html = html.replace(\n      /<head(.*?)>/i,\n      (m, attrs) =>\n        `<head${attrs}>\\n    <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\"/>\\n    <meta http-equiv=\"Pragma\" content=\"no-cache\"/>\\n    <meta http-equiv=\"Expires\" content=\"0\"/>`,\n    );\n  }\n\n  // Insere script para desregistrar Service Workers antigos\n  if (!/id=\"sw-unregister\"/i.test(html)) {\n    const scriptSW = `\n    <script id=\"sw-unregister\">\n      (function() {\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.getRegistrations?.().then((regs) => {\n            regs.forEach((r) => r.unregister().catch(() => {}))\n          }).catch(() => {})\n          navigator.serviceWorker.getRegistration?.().then((reg) => {\n            if (reg?.active) reg.update().catch(() => {})\n          })\n        }\n      })();\n    </script>`;\n    html = html.replace(/<\\/head>/i, `${scriptSW}\\n</head>`);\n  }\n\n  return html;\n}\n\n/**\n * @summary Executa o processamento de todos os arquivos HTML do projeto.\n */\nfunction executar(): void {\n  const arquivos = listarArquivos(raiz);\n  let alterados = 0;\n\n  for (const arquivo of arquivos) {\n    const antes = fs.readFileSync(arquivo, \"utf8\");\n    const depois = processarHtml(antes);\n    if (antes !== depois) {\n      fs.writeFileSync(arquivo, depois, \"utf8\");\n      alterados++;\n      console.log(`[processar-html] Atualizado: ${path.relative(raiz, arquivo)}`);\n    }\n  }\n\n  console.log(`[processar-html] Arquivos alterados: ${alterados}`);\n}\n\nexecutar();\n"]}