{"version":3,"file":"processar-html.js","sourceRoot":"","sources":["../../../src/processos/processar-html.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;GAGG;AACH,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAE3B;;GAEG;AACH,SAAS,cAAc,CAAC,SAAiB,EAAE,WAAqB,EAAE;IAC9D,KAAK,MAAM,OAAO,IAAI,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QACvE,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YAClF,SAAS;QACb,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,OAAO,CAAC,WAAW,EAAE;YAAE,cAAc,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;aAChE,IAAI,OAAO,CAAC,MAAM,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChG,CAAC;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED;;GAEG;AACH,SAAS,aAAa,CAAC,QAAgB;IACnC,IAAI,IAAI,GAAG,QAAQ,CAAC;IAEpB,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAU,EAAE;QACnD,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxD,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAC/D,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,YAAY,KAAK,CAAC,CAAC;YAAE,OAAO,GAAG,CAAC;QAEpC,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAG,OAAO;aACrB,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;aACvB,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAE/E,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1E,OAAO,GAAG,IAAI,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;IACxC,CAAC,CAAC;IAEF,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,kDAAkD,EAAE,EAAE,CAAC,CAAC;IAC5E,IAAI,GAAG,IAAI,CAAC,OAAO,CACf,sEAAsE,EACtE,8DAA8D,CACjE,CAAC;IAEF,IAAI,GAAG,IAAI,CAAC,OAAO,CACf,wDAAwD,EACxD,2CAA2C,CAC9C,CAAC;IAEF,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,oDAAoD,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAC5F,IAAI,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QACxC,IAAI,qEAAqE,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QAC9F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QAErC,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;QACrD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QACtD,OAAO,UAAU,YAAY,GAAG,SAAS,QAAQ,QAAQ,IAAI,IAAI,YAAY,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,yCAAyC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;QAClF,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO,CAAC,CAAC;QAEtC,MAAM,SAAS,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7C,OAAO,QAAQ,GAAG,GAAG,SAAS,SAAS,SAAS,IAAI,IAAI,GAAG,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5C,IAAI,GAAG,IAAI,CAAC,OAAO,CACf,cAAc,EACd,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CACT,QAAQ,KAAK,2LAA2L,CAC/M,CAAC;IACN,CAAC;IAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACpC,MAAM,QAAQ,GAAG;;;;;;;;;;;;cAYX,CAAC;QACP,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,QAAQ,WAAW,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAS,QAAQ;IACb,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IACtC,IAAI,SAAS,GAAG,CAAC,CAAC;IAElB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;QAC7B,MAAM,KAAK,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,KAAK,KAAK,MAAM,EAAE,CAAC;YACnB,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YAC1C,SAAS,EAAE,CAAC;YACZ,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAChF,CAAC;IACL,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;AACrE,CAAC;AAED,QAAQ,EAAE,CAAC","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\n/**\r\n * Define a raiz do projeto a partir do diretório atual de execução.\r\n * Isso garante compatibilidade tanto no src quanto no dist.\r\n */\r\nconst raiz = process.cwd();\r\n\r\n/**\r\n * @summary Percorre o diretório recursivamente e retorna todos os arquivos HTML encontrados.\r\n */\r\nfunction listarArquivos(diretorio: string, arquivos: string[] = []): string[] {\r\n    for (const entrada of fs.readdirSync(diretorio, { withFileTypes: true })) {\r\n        if ([\"node_modules\", \"dist\"].includes(entrada.name) || entrada.name.startsWith(\".git\"))\r\n            continue;\r\n        const caminhoCompleto = path.join(diretorio, entrada.name);\r\n        if (entrada.isDirectory()) listarArquivos(caminhoCompleto, arquivos);\r\n        else if (entrada.isFile() && entrada.name.endsWith(\".html\")) arquivos.push(caminhoCompleto);\r\n    }\r\n    return arquivos;\r\n}\r\n\r\n/**\r\n * @summary Processa o conteúdo HTML aplicando minificações e atualizações.\r\n */\r\nfunction processarHtml(conteudo: string): string {\r\n    let html = conteudo;\r\n\r\n    const limparParametrosVersao = (url: string): string => {\r\n        const hashIndex = url.indexOf(\"#\");\r\n        const hash = hashIndex >= 0 ? url.slice(hashIndex) : \"\";\r\n        const semHash = hashIndex >= 0 ? url.slice(0, hashIndex) : url;\r\n        const interrogacao = semHash.indexOf(\"?\");\r\n        if (interrogacao === -1) return url;\r\n\r\n        const base = semHash.slice(0, interrogacao);\r\n        const parametros = semHash\r\n            .slice(interrogacao + 1)\r\n            .split(\"&\")\r\n            .filter((parametro) => parametro.trim() !== \"\" && !/^v=/i.test(parametro));\r\n\r\n        const novaQuery = parametros.length > 0 ? `?${parametros.join(\"&\")}` : \"\";\r\n        return `${base}${novaQuery}${hash}`;\r\n    };\r\n\r\n    html = html.replace(/<script>\\s*tailwind\\.config[\\s\\S]*?<\\/script>/gim, \"\");\r\n    html = html.replace(\r\n        /<script[^>]*src=\"https:\\/\\/cdn\\.tailwindcss\\.com\"[^>]*><\\/script>/gim,\r\n        '<link rel=\"stylesheet\" href=\"/dist/assets/tailwind.min.css\">',\r\n    );\r\n\r\n    html = html.replace(\r\n        /href=\"(?:\\.{1,2}\\/)*src\\/estilos\\/controle-tema\\.css\"/g,\r\n        'href=\"/dist/assets/controle-tema.min.css\"',\r\n    );\r\n\r\n    html = html.replace(/<script([^>]*?)src=\"([^\"]*?)\"([^>]*)><\\/script>/gim, (m, pre, src, post) => {\r\n        if (/^https?:\\/\\//i.test(src)) return m;\r\n        if (/googletagmanager\\.com|googlesyndication\\.com|cdn\\.tailwindcss\\.com/i.test(src)) return m;\r\n        if (!/\\/dist\\//i.test(src)) return m;\r\n\r\n        const temDefer = /\\bdefer\\b/i.test(pre) || /\\bdefer\\b/i.test(post);\r\n        const srcLimpo = limparParametrosVersao(src);\r\n        const preCorrigido = temDefer ? pre : `${pre} defer`;\r\n        const separador = /\\s$/.test(preCorrigido) ? \"\" : \" \";\r\n        return `<script${preCorrigido}${separador}src=\"${srcLimpo}\"${post}></script>`;\r\n    });\r\n\r\n    html = html.replace(/<link([^>]*?)href=\"([^\"]*?)\"([^>]*)>/gim, (m, pre, href, post) => {\r\n        if (/^https?:\\/\\//i.test(href)) return m;\r\n        if (!/\\/dist\\//i.test(href)) return m;\r\n\r\n        const hrefLimpo = limparParametrosVersao(href);\r\n        const separador = /\\s$/.test(pre) ? \"\" : \" \";\r\n        return `<link${pre}${separador}href=\"${hrefLimpo}\"${post}>`;\r\n    });\r\n\r\n    if (!/http-equiv=\"Cache-Control\"/i.test(html)) {\r\n        html = html.replace(\r\n            /<head(.*?)>/i,\r\n            (m, attrs) =>\r\n                `<head${attrs}>\\n    <meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\"/>\\n    <meta http-equiv=\"Pragma\" content=\"no-cache\"/>\\n    <meta http-equiv=\"Expires\" content=\"0\"/>`,\r\n        );\r\n    }\r\n\r\n    if (!/id=\"sw-unregister\"/i.test(html)) {\r\n        const scriptSW = `\r\n    <script id=\"sw-unregister\">\r\n      (function() {\r\n        if ('serviceWorker' in navigator) {\r\n          navigator.serviceWorker.getRegistrations?.().then((regs) => {\r\n            regs.forEach((r) => r.unregister().catch(() => {}))\r\n          }).catch(() => {})\r\n          navigator.serviceWorker.getRegistration?.().then((reg) => {\r\n            if (reg?.active) reg.update().catch(() => {})\r\n          })\r\n        }\r\n      })();\r\n    </script>`;\r\n        html = html.replace(/<\\/head>/i, `${scriptSW}\\n</head>`);\r\n    }\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * @summary Executa o processamento de todos os arquivos HTML do projeto.\r\n */\r\nfunction executar(): void {\r\n    const arquivos = listarArquivos(raiz);\r\n    let alterados = 0;\r\n\r\n    for (const arquivo of arquivos) {\r\n        const antes = fs.readFileSync(arquivo, \"utf8\");\r\n        const depois = processarHtml(antes);\r\n        if (antes !== depois) {\r\n            fs.writeFileSync(arquivo, depois, \"utf8\");\r\n            alterados++;\r\n            console.log(`[processar-html] Atualizado: ${path.relative(raiz, arquivo)}`);\r\n        }\r\n    }\r\n\r\n    console.log(`[processar-html] Arquivos alterados: ${alterados}`);\r\n}\r\n\r\nexecutar();\r\n"]}