{"version":3,"file":"compilar-tailwind.js","sourceRoot":"","sources":["../../../src/processos/compilar-tailwind.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,MAAM,IAAI,CAAA;AACnB,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAA;AAE5C,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;AAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,CAAA;AACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;AAClD,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAA;AACrD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAA;AAEpD,SAAS,gBAAgB,CAAC,IAAc;IACtC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,EAAE,aAAa,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAA;IAC7E,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC;QACzB,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;QACtE,OAAO,IAAI,CAAA;IACb,CAAC;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAED,SAAS,QAAQ;IACf,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5B,OAAO,CAAC,KAAK,CAAC,0DAA0D,OAAO,EAAE,CAAC,CAAA;QAClF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACjB,CAAC;IAED,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;IAE3C,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,CAAA;IAEnE,IAAI,CAAC;QACH,2DAA2D;QAC3D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,sBAAsB;YACtB,YAAY,CAAC,KAAK,EAAE,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;QACrE,CAAC;QACD,MAAM,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QAClE,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,OAAO,SAAS,CAAC,CAAA;IAC7F,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAA;QACxE,MAAM,CAAC,CAAA;IACT,CAAC;AACH,CAAC;AAED,QAAQ,EAAE,CAAA","sourcesContent":["/**\n * Compila o Tailwind CSS a partir de `src/estilos/tailwind.css`\n * e gera `dist/assets/tailwind.min.css` usando o CLI local.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport { execFileSync } from 'child_process'\n\nconst raiz = process.cwd()\nconst entrada = path.join(raiz, 'src', 'estilos', 'tailwind.css')\nconst saidaDir = path.join(raiz, 'dist', 'assets')\nconst saida = path.join(saidaDir, 'tailwind.min.css')\nconst config = path.join(raiz, 'tailwind.config.js')\n\nfunction construirComNode(args: string[]) {\n  const cliJs = path.join(raiz, 'node_modules', 'tailwindcss', 'lib', 'cli.js')\n  if (fs.existsSync(cliJs)) {\n    execFileSync(process.execPath, [cliJs, ...args], { stdio: 'inherit' })\n    return true\n  }\n  return false\n}\n\nfunction compilar(): void {\n  if (!fs.existsSync(entrada)) {\n    console.error(`[compilar-tailwind] Arquivo de entrada não encontrado: ${entrada}`)\n    process.exit(1)\n  }\n\n  fs.mkdirSync(saidaDir, { recursive: true })\n\n  const args = ['-i', entrada, '-o', saida, '-c', config, '--minify']\n\n  try {\n    // Tenta via Node + CLI JS direto (mais estável no Windows)\n    if (!construirComNode(args)) {\n      // Fallback: tenta npx\n      execFileSync('npx', ['tailwindcss', ...args], { stdio: 'inherit' })\n    }\n    const tamanho = fs.existsSync(saida) ? fs.statSync(saida).size : 0\n    console.log(`[compilar-tailwind] Gerado: ${path.relative(raiz, saida)} (${tamanho} bytes)`) \n  } catch (e) {\n    console.error('[compilar-tailwind] Falha ao compilar Tailwind via CLI.')\n    throw e\n  }\n}\n\ncompilar()\n"]}