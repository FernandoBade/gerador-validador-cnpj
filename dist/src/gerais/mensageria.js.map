{"version":3,"file":"mensageria.js","sourceRoot":"","sources":["../../../src/gerais/mensageria.ts"],"names":[],"mappings":"AAAA;;;;+BAI+B;AAE/B,OAAO,EACH,oBAAoB,EACpB,qBAAqB,EACrB,uBAAuB,GAC1B,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAE3E,MAAM,eAAe,GAAG,IAAI,OAAO,EAAuB,CAAC;AAE3D;;;;;GAKG;AACH,MAAM,UAAU,WAAW,CACvB,SAAyB,EACzB,QAAgB,EAChB,OAAkB,SAAS,CAAC,OAAO;IAEnC,MAAM,WAAW,GACb,gJAAgJ,CAAC;IAErJ,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC;IACjC,SAAS,CAAC,SAAS,GAAG,GAAG,WAAW,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,eAAe,IAAI,WAAW,CAAC,gBAAgB,IAAI,WAAW,CAAC,kBAAkB,EAAE,CAAC;IAEnL,qBAAqB,CAAC,GAAG,EAAE;QACvB,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,oBAAoB,CAAC,CAAC;QACpD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,qBAAqB,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC7C,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACtB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;QACnC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,qBAAqB,CAAC,CAAC;QACrD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,oBAAoB,CAAC,CAAC;QACjD,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC,EAAE,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAEhC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC;AAED,OAAO,EAAE,SAAS,EAAE,CAAC","sourcesContent":["/* ============================\r\n   Mensageria (Toasts/Avisos)\r\n   - Exibe avisos temporários com estilos por tipo\r\n   - Reutilizável em todas as páginas\r\n============================ */\r\n\r\nimport {\r\n    CLASSES_AVISO_OCULTO,\r\n    CLASSES_AVISO_VISIVEL,\r\n    MAPA_CLASSES_TIPO_AVISO,\r\n} from \"./constantes.js\";\r\nimport { ClasseAviso, IntervaloTemporizador, TipoAviso } from \"./enums.js\";\r\n\r\nconst timeoutsPorArea = new WeakMap<HTMLElement, number>();\r\n\r\n/**\r\n * @summary Exibe um aviso temporário na área indicada, com estilos por tipo.\r\n * @param areaAviso Elemento alvo que renderiza o toast (ex.: div#toast).\r\n * @param mensagem Texto do aviso a ser exibido.\r\n * @param tipo Tipo de aviso para estilização (sucesso, info, erro, etc.).\r\n */\r\nexport function exibirAviso(\r\n    areaAviso: HTMLDivElement,\r\n    mensagem: string,\r\n    tipo: TipoAviso = TipoAviso.Sucesso,\r\n): void {\r\n    const classesBase =\r\n        \"z-[9999] fixed bottom-6 right-6 min-w-3xs max-w-[calc(100%-2rem)] rounded-lg px-4 py-3 text-sm shadow-2xl transition-all duration-300 ease-out\";\r\n\r\n    areaAviso.textContent = mensagem;\r\n    areaAviso.className = `${classesBase} ${MAPA_CLASSES_TIPO_AVISO[tipo].join(\" \")} ${ClasseAviso.OpacidadeOculta} ${ClasseAviso.TranslacaoOculta} ${ClasseAviso.PonteiroDesativado}`;\r\n\r\n    requestAnimationFrame(() => {\r\n        areaAviso.classList.remove(...CLASSES_AVISO_OCULTO);\r\n        areaAviso.classList.add(...CLASSES_AVISO_VISIVEL);\r\n    });\r\n\r\n    const atual = timeoutsPorArea.get(areaAviso);\r\n    if (atual !== undefined) {\r\n        window.clearTimeout(atual);\r\n    }\r\n\r\n    const timeout = window.setTimeout(() => {\r\n        areaAviso.classList.remove(...CLASSES_AVISO_VISIVEL);\r\n        areaAviso.classList.add(...CLASSES_AVISO_OCULTO);\r\n        timeoutsPorArea.delete(areaAviso);\r\n    }, IntervaloTemporizador.Aviso);\r\n\r\n    timeoutsPorArea.set(areaAviso, timeout);\r\n}\r\n\r\nexport { TipoAviso };\r\n"]}