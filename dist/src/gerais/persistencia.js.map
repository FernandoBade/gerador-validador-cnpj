{"version":3,"file":"persistencia.js","sourceRoot":"","sources":["../../../src/gerais/persistencia.ts"],"names":[],"mappings":"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","sourcesContent":["/* ============================\r\n   Salva e restaura os últimos estados de\r\n   aberto/fechado dos elementos <details>\r\n   ============================ */\r\n\r\n/**\r\n * @summary Lê um valor do localStorage de forma segura, evitando quebra em contextos onde o storage pode estar bloqueado.\r\n */\r\nfunction lerDoStorage(chave: string): string | null {\r\n    try {\r\n        return window.localStorage.getItem(chave);\r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * @summary Escreve um valor no localStorage de forma segura, ignorando erros em ambientes restritos.\r\n */\r\nfunction escreverNoStorage(chave: string, valor: string): void {\r\n    try {\r\n        window.localStorage.setItem(chave, valor);\r\n    } catch {\r\n        // ignora silenciosamente para não quebrar a UI\r\n    }\r\n}\r\n\r\n/**\r\n * @summary Gera a chave única para persistência do estado de um elemento <details>.\r\n * Prioriza o atributo data-chave-storage; depois o id; por fim o índice como fallback.\r\n */\r\nfunction gerarChaveParaDetails(details: HTMLDetailsElement, indiceFallback: number): string {\r\n    const chaveCustom = details.dataset.chaveStorage?.trim();\r\n    if (chaveCustom && chaveCustom.length > 0) return chaveCustom;\r\n\r\n    const id = details.id?.trim();\r\n    if (id && id.length > 0) return `details-aberto-${id}`;\r\n\r\n    return `details-estado-${indiceFallback}`;\r\n}\r\n\r\n/**\r\n * @summary Aplica no elemento <details> o estado salvo anteriormente (aberto ou fechado).\r\n */\r\nfunction aplicarEstado(details: HTMLDetailsElement, chave: string): void {\r\n    const valorSalvo = lerDoStorage(chave);\r\n    if (valorSalvo === \"true\") {\r\n        details.setAttribute(\"open\", \"\");\r\n    } else if (valorSalvo === \"false\") {\r\n        details.removeAttribute(\"open\");\r\n    }\r\n    // Se null, não havia estado salvo: respeita o HTML original\r\n}\r\n\r\n/**\r\n * @summary Observa mudanças de abrir/fechar em um <details> e persiste o estado automaticamente.\r\n */\r\nfunction observarMudancas(details: HTMLDetailsElement, chave: string): void {\r\n    details.addEventListener(\"toggle\", () => {\r\n        escreverNoStorage(chave, String(details.open));\r\n    });\r\n}\r\n\r\n/**\r\n * @summary Inicializa a persistência de TODOS os <details> presentes no documento.\r\n * Usa data-chave-storage ou id para formar a chave; se ausentes, usa um índice incremental.\r\n */\r\nexport function inicializarPersistenciaDeTodosOsDetails(): void {\r\n    const todosOsDetails = document.querySelectorAll<HTMLDetailsElement>(\"details\");\r\n\r\n    todosOsDetails.forEach((detalhe, indice) => {\r\n        const chave = gerarChaveParaDetails(detalhe, indice);\r\n        aplicarEstado(detalhe, chave);\r\n        observarMudancas(detalhe, chave);\r\n    });\r\n}\r\n\r\n/**\r\n * @summary Inicializa a persistência para um único <details> identificado por seletor (id ou qualquer seletor CSS).\r\n * Útil se você quiser controlar elementos específicos manualmente.\r\n */\r\nexport function inicializarPersistenciaDeUmDetails(seletor: string): void {\r\n    const detalhe = document.querySelector<HTMLDetailsElement>(seletor);\r\n    if (!detalhe) return;\r\n\r\n    const chave = gerarChaveParaDetails(detalhe, 0);\r\n    aplicarEstado(detalhe, chave);\r\n    observarMudancas(detalhe, chave);\r\n}\r\n\r\n/**\r\n * @summary Ponto de entrada automático: dispara a inicialização quando o DOM estiver pronto.\r\n * Evita chamadas duplas e garante que os <details> já existam no DOM.\r\n */\r\nfunction iniciarQuandoDomPronto(): void {\r\n    if (document.readyState === \"loading\") {\r\n        document.addEventListener(\"DOMContentLoaded\", () => inicializarPersistenciaDeTodosOsDetails(), {\r\n            once: true,\r\n        });\r\n    } else {\r\n        inicializarPersistenciaDeTodosOsDetails();\r\n    }\r\n}\r\n\r\niniciarQuandoDomPronto();\r\n"]}