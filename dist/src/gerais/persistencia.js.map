{"version":3,"file":"persistencia.js","sourceRoot":"","sources":["../../../src/gerais/persistencia.ts"],"names":[],"mappings":"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","sourcesContent":["/* ============================\n   Salva e restaura os últimos estados de\n   aberto/fechado dos elementos <details>\n   ============================ */\n\n/**\n * @summary Lê um valor do localStorage de forma segura, evitando quebra em contextos onde o storage pode estar bloqueado.\n */\nfunction lerDoStorage(chave: string): string | null {\n  try {\n    return window.localStorage.getItem(chave);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * @summary Escreve um valor no localStorage de forma segura, ignorando erros em ambientes restritos.\n */\nfunction escreverNoStorage(chave: string, valor: string): void {\n  try {\n    window.localStorage.setItem(chave, valor);\n  } catch {\n    // ignora silenciosamente para não quebrar a UI\n  }\n}\n\n/**\n * @summary Gera a chave única para persistência do estado de um elemento <details>.\n * Prioriza o atributo data-chave-storage; depois o id; por fim o índice como fallback.\n */\nfunction gerarChaveParaDetails(details: HTMLDetailsElement, indiceFallback: number): string {\n  const chaveCustom = details.dataset.chaveStorage?.trim();\n  if (chaveCustom && chaveCustom.length > 0) return chaveCustom;\n\n  const id = details.id?.trim();\n  if (id && id.length > 0) return `details-aberto-${id}`;\n\n  return `details-estado-${indiceFallback}`;\n}\n\n/**\n * @summary Aplica no elemento <details> o estado salvo anteriormente (aberto ou fechado).\n */\nfunction aplicarEstado(details: HTMLDetailsElement, chave: string): void {\n  const valorSalvo = lerDoStorage(chave);\n  if (valorSalvo === \"true\") {\n    details.setAttribute(\"open\", \"\");\n  } else if (valorSalvo === \"false\") {\n    details.removeAttribute(\"open\");\n  }\n  // Se null, não havia estado salvo: respeita o HTML original\n}\n\n/**\n * @summary Observa mudanças de abrir/fechar em um <details> e persiste o estado automaticamente.\n */\nfunction observarMudancas(details: HTMLDetailsElement, chave: string): void {\n  details.addEventListener(\"toggle\", () => {\n    escreverNoStorage(chave, String(details.open));\n  });\n}\n\n/**\n * @summary Inicializa a persistência de TODOS os <details> presentes no documento.\n * Usa data-chave-storage ou id para formar a chave; se ausentes, usa um índice incremental.\n */\nexport function inicializarPersistenciaDeTodosOsDetails(): void {\n  const todosOsDetails = document.querySelectorAll<HTMLDetailsElement>(\"details\");\n\n  todosOsDetails.forEach((detalhe, indice) => {\n    const chave = gerarChaveParaDetails(detalhe, indice);\n    aplicarEstado(detalhe, chave);\n    observarMudancas(detalhe, chave);\n  });\n}\n\n/**\n * @summary Inicializa a persistência para um único <details> identificado por seletor (id ou qualquer seletor CSS).\n * Útil se você quiser controlar elementos específicos manualmente.\n */\nexport function inicializarPersistenciaDeUmDetails(seletor: string): void {\n  const detalhe = document.querySelector<HTMLDetailsElement>(seletor);\n  if (!detalhe) return;\n\n  const chave = gerarChaveParaDetails(detalhe, 0);\n  aplicarEstado(detalhe, chave);\n  observarMudancas(detalhe, chave);\n}\n\n/**\n * @summary Ponto de entrada automático: dispara a inicialização quando o DOM estiver pronto.\n * Evita chamadas duplas e garante que os <details> já existam no DOM.\n */\nfunction iniciarQuandoDomPronto(): void {\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", () => inicializarPersistenciaDeTodosOsDetails(), {\n      once: true,\n    });\n  } else {\n    inicializarPersistenciaDeTodosOsDetails();\n  }\n}\n\niniciarQuandoDomPronto();\n"]}