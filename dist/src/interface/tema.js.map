{"version":3,"file":"tema.js","sourceRoot":"","sources":["../../../src/interface/tema.ts"],"names":[],"mappings":"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","sourcesContent":["/* ============================\r\n   Controle de Tema (Claro/Escuro)\r\n   - Lê e persiste preferência no localStorage\r\n   - Sincroniza com a preferência do sistema (prefers-color-scheme)\r\n   - Inicializa o toggle de tema e mantém estado consistente\r\n============================ */\r\n\r\n/**\r\n * @summary Chave única usada para armazenar o tema atual no localStorage.\r\n */\r\nconst CHAVE_ARMAZENAMENTO = \"tema-cnpj-bade-digital\" as const;\r\n\r\ntype TemaPreferido = \"light\" | \"dark\";\r\n\r\n/**\r\n * @summary Verifica se um valor é um tema válido (\"light\" ou \"dark\").\r\n */\r\nconst ehTemaValido = (valor: string | null): valor is TemaPreferido =>\r\n    valor === \"light\" || valor === \"dark\";\r\n\r\n/**\r\n * @summary Obtém o tema armazenado no localStorage, se existir.\r\n * @returns O tema armazenado (\"light\" ou \"dark\") ou null se não houver.\r\n */\r\nexport const obterPreferenciaArmazenada = (): TemaPreferido | null => {\r\n    const tema = localStorage.getItem(CHAVE_ARMAZENAMENTO);\r\n    return ehTemaValido(tema) ? tema : null;\r\n};\r\n\r\n/**\r\n * @summary Verifica se há uma preferência de tema salva no localStorage.\r\n */\r\nconst possuiPreferenciaArmazenada = (): boolean => {\r\n    const tema = localStorage.getItem(CHAVE_ARMAZENAMENTO);\r\n    return ehTemaValido(tema);\r\n};\r\n\r\n/**\r\n * @summary Aplica o tema (dark ou light) ao documento e salva no localStorage, se desejado.\r\n * @param tema Tema a ser aplicado.\r\n * @param persistir Define se o tema deve ser salvo no localStorage.\r\n */\r\nconst aplicarTema = (tema: TemaPreferido, persistir: boolean): void => {\r\n    document.documentElement.classList.toggle(\"dark\", tema === \"dark\");\r\n    if (persistir) localStorage.setItem(CHAVE_ARMAZENAMENTO, tema);\r\n};\r\n\r\n/**\r\n * @summary Identifica a preferência atual do usuário (armazenada ou do sistema) e aplica o tema.\r\n */\r\nexport function identificaPreferenciaEAplicaTema(): void {\r\n    const temaArmazenado = obterPreferenciaArmazenada();\r\n\r\n    const prefereEscuro = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n    const temaSelecionado: TemaPreferido = temaArmazenado ?? (prefereEscuro ? \"dark\" : \"light\");\r\n\r\n    aplicarTema(temaSelecionado, !!temaArmazenado);\r\n}\r\n\r\n/**\r\n * @summary Inicializa o controle do alternador de tema e sincroniza com o sistema.\r\n * Configura eventos para alternar o tema manualmente e reagir a mudanças no sistema.\r\n */\r\nconst inicializarControleTema = (): void => {\r\n    const controleTema = document.getElementById(\"alternar-tema\") as HTMLInputElement | null;\r\n    if (!controleTema) return;\r\n\r\n    const preferenciaSistema = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    const temaArmazenado = obterPreferenciaArmazenada();\r\n    const temaInicial: TemaPreferido =\r\n        temaArmazenado ?? (preferenciaSistema.matches ? \"dark\" : \"light\");\r\n\r\n    aplicarTema(temaInicial, !!temaArmazenado);\r\n    controleTema.checked = temaInicial === \"dark\";\r\n\r\n    controleTema.addEventListener(\"change\", () => {\r\n        const novoTema: TemaPreferido = controleTema.checked ? \"dark\" : \"light\";\r\n        aplicarTema(novoTema, true);\r\n    });\r\n\r\n    preferenciaSistema.addEventListener(\"change\", (evento: MediaQueryListEvent) => {\r\n        if (possuiPreferenciaArmazenada()) return;\r\n\r\n        const novoTema: TemaPreferido = evento.matches ? \"dark\" : \"light\";\r\n        aplicarTema(novoTema, false);\r\n        controleTema.checked = novoTema === \"dark\";\r\n    });\r\n};\r\n\r\n/**\r\n * @summary Executa a inicialização do controle de tema quando o DOM estiver carregado.\r\n */\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    inicializarControleTema();\r\n});\r\n\r\nexport { };\r\n"]}