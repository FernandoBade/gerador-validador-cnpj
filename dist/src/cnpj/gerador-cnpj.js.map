{"version":3,"file":"gerador-cnpj.js","sourceRoot":"","sources":["../../../src/cnpj/gerador-cnpj.ts"],"names":[],"mappings":"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","sourcesContent":["/* ============================\r\n   Gerador CNPJ Alfanumérico 2026\r\n   - Corpo: 12 caracteres [0-9A-Z] (ou apenas números)\r\n   - Dígitos verificadores: módulo 11 (somente numéricos)\r\n   - Máscara visual: ##.###.###/####-##\r\n   - Auto-regeneração: 10s + barra de progresso\r\n============================ */\r\n\r\nimport { IntervaloTemporizador, TamanhoIdentificador, TipoAviso } from \"../gerais/enums.js\";\r\nimport { CARACTERES_PERMITIDOS } from \"../gerais/constantes.js\";\r\nimport {\r\n    ElementosInterface,\r\n    HistoricoIdentificadores,\r\n    IdentificadorGerado,\r\n    Temporizadores,\r\n} from \"../gerais/tipos.js\";\r\nimport { htmlCookies, inicializarAvisoDeCookies } from \"../gerais/cookies.js\";\r\nimport { aplicarMascara } from \"./formatacao-cnpj.js\";\r\nimport {\r\n    calcularDigitoVerificador,\r\n    converterCaractereParaValor,\r\n    verificarSequenciaRepetida,\r\n    PESOS_DIGITOS,\r\n} from \"../cnpj/algoritmo-cnpj.js\";\r\nimport {\r\n    copiarTexto,\r\n    inicializarEfeitoOnda,\r\n    obterElementoObrigatorio,\r\n} from \"../interface/interface.js\";\r\nimport { exibirAviso } from \"../gerais/mensageria.js\";\r\n\r\n/**\r\n * @summary Classe responsável por agrupar regras de negócio e interação com a interface do gerador.\r\n */\r\nclass GeradorCnpj {\r\n    private cnpjAtual: string | null = null;\r\n    private readonly historico: HistoricoIdentificadores = { itens: [], limite: 100 };\r\n    private readonly temporizadores: Temporizadores = { inicioContagem: 0 };\r\n\r\n    /**\r\n     * @summary Inicializa a classe com os elementos de interface necessários.\r\n     * @param elementos Elementos HTML utilizados pela aplicação.\r\n     */\r\n    public constructor(private readonly elementos: ElementosInterface) {\r\n        this.configurarEventos();\r\n        inicializarEfeitoOnda();\r\n        this.inicializarHistorico();\r\n        this.gerarEExibirIdentificador();\r\n    }\r\n\r\n    /**\r\n     * @summary Configura todos os manipuladores de eventos da interface.\r\n     */\r\n    private configurarEventos(): void {\r\n        const { botaoGerar, botaoGerar10, botaoCopiar, botaoCopiarTodos, controleMascara } =\r\n            this.elementos;\r\n\r\n        botaoGerar.addEventListener(\"click\", () => {\r\n            this.tratarCliqueGerar();\r\n        });\r\n\r\n        botaoGerar10.addEventListener(\"click\", () => {\r\n            this.tratarCliqueGera10();\r\n        });\r\n\r\n        botaoCopiar.addEventListener(\"click\", () => {\r\n            void this.tratarCliqueCopiar();\r\n        });\r\n\r\n        botaoCopiarTodos?.addEventListener(\"click\", (evento) => {\r\n            evento.preventDefault();\r\n            void this.copiarTodos();\r\n        });\r\n\r\n        controleMascara?.addEventListener(\"change\", () => {\r\n            this.atualizarCampoResultado();\r\n            this.atualizarVisualHistorico();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @summary Manipula o clique no botão principal de geração de identificador.\r\n     */\r\n    private tratarCliqueGerar(): void {\r\n        try {\r\n            this.gerarEExibirIdentificador(true);\r\n        } catch (erro) {\r\n            this.cnpjAtual = null;\r\n            this.elementos.campoResultado.value = \"\";\r\n            console.error(erro);\r\n            exibirAviso(this.elementos.areaAviso, \"Erro inesperado ao gerar.\", TipoAviso.Erro);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @summary Manipula o clique no botão de geração em lote (+10).\r\n     */\r\n    private tratarCliqueGera10(): void {\r\n        try {\r\n            for (let i = 0; i < 10; i++) {\r\n                if (this.historico.itens.length >= this.historico.limite) {\r\n                    exibirAviso(\r\n                        this.elementos.areaAviso,\r\n                        `Limite de ${this.historico.limite} CNPJs atingido. CALMAAAAA QUE O NAVEGADOR NUM GUENTA!!! 😅`,\r\n                        TipoAviso.Erro,\r\n                    );\r\n                    break;\r\n                }\r\n                this.gerarEExibirIdentificador(true, 10);\r\n            }\r\n        } catch (erro) {\r\n            this.cnpjAtual = null;\r\n            this.elementos.campoResultado.value = \"\";\r\n            console.error(erro);\r\n            exibirAviso(this.elementos.areaAviso, \"Erro inesperado ao gerar.\", TipoAviso.Erro);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @summary Manipula o clique no botão de copiar o identificador atual.\r\n     */\r\n    private async tratarCliqueCopiar(): Promise<void> {\r\n        if (!this.cnpjAtual) {\r\n            exibirAviso(this.elementos.areaAviso, \"Nenhum CNPJ gerado para copiar\", TipoAviso.Erro);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const valorParaCopiar = this.elementos.controleMascara?.checked\r\n                ? aplicarMascara(this.cnpjAtual)\r\n                : this.cnpjAtual;\r\n            await copiarTexto(valorParaCopiar);\r\n            exibirAviso(\r\n                this.elementos.areaAviso,\r\n                `CNPJ copiado: ${valorParaCopiar}`,\r\n                TipoAviso.InfoAlternativo,\r\n            );\r\n        } catch (erro) {\r\n            console.error(erro);\r\n            exibirAviso(this.elementos.areaAviso, \"Falha ao copiar\", TipoAviso.Erro);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @summary Gera uma sequência base alfanumérica com o tamanho definido para o identificador.\r\n     * @returns Sequência composta por caracteres permitidos em letras maiúsculas.\r\n     */\r\n    private gerarCorpoAlfanumerico(): string {\r\n        let corpo = \"\";\r\n        for (let indice = 0; indice < TamanhoIdentificador.Corpo; indice++) {\r\n            const indiceCaractere = Math.floor(Math.random() * CARACTERES_PERMITIDOS.length);\r\n            corpo += CARACTERES_PERMITIDOS[indiceCaractere] ?? \"\";\r\n        }\r\n        return corpo;\r\n    }\r\n\r\n    /**\r\n     * @summary Gera uma sequência base exclusivamente numérica com o tamanho definido.\r\n     * @returns Sequência composta apenas por dígitos [0-9].\r\n     */\r\n    private gerarCorpoNumerico(): string {\r\n        let corpo = \"\";\r\n        for (let indice = 0; indice < TamanhoIdentificador.Corpo; indice++) {\r\n            corpo += Math.floor(Math.random() * 10).toString();\r\n        }\r\n        return corpo;\r\n    }\r\n\r\n    /**\r\n     * @summary Converte um caractere alfanumérico para o valor numérico esperado pelo módulo 11.\r\n     * @param caractere Caractere a ser convertido.\r\n     * @returns Valor numérico correspondente ao caractere informado.\r\n     */\r\n    // Reaproveitado de algoritmo-cnpj.ts via import\r\n\r\n    /**\r\n     * @summary Verifica se todos os caracteres da sequência são idênticos.\r\n     * @param valor Texto a ser avaliado.\r\n     * @returns Indica se a sequência está composta por um único caractere repetido.\r\n     */\r\n    // Reaproveitado de algoritmo-cnpj.ts via import\r\n\r\n    /**\r\n     * @summary Calcula um dígito verificador com base em valores e pesos informados.\r\n     * @param valores Vetor com os valores numéricos do identificador.\r\n     * @param pesos Pesos utilizados no cálculo do módulo 11.\r\n     * @returns Dígito verificador calculado conforme as regras do módulo 11.\r\n     */\r\n    // Reaproveitado de algoritmo-cnpj.ts via import\r\n\r\n    /**\r\n     * @summary Aplica a máscara visual padrão do CNPJ ao valor informado.\r\n     * @param valor Identificador puro com 14 caracteres.\r\n     * @returns Texto formatado conforme a máscara ##.###.###/####-##.\r\n     */\r\n    // Reaproveitado de formatacao-cnpj.ts via import\r\n\r\n    /**\r\n     * @summary Gera um identificador válido composto por corpo (alfa ou numérico) e dígitos verificadores.\r\n     * @returns Objeto com a versão pura e mascarada do identificador gerado.\r\n     */\r\n    private gerarIdentificadorValido(): IdentificadorGerado {\r\n        const limiteTentativas = 2_000;\r\n\r\n        for (let tentativa = 0; tentativa < limiteTentativas; tentativa++) {\r\n            const usarAlfanumerico = this.elementos.controleAlfanumerico?.checked !== false;\r\n            const corpo = usarAlfanumerico ? this.gerarCorpoAlfanumerico() : this.gerarCorpoNumerico();\r\n            if (verificarSequenciaRepetida(corpo)) {\r\n                continue;\r\n            }\r\n\r\n            const valores = Array.from(corpo).map((caractere) => converterCaractereParaValor(caractere));\r\n            const digitoUm = calcularDigitoVerificador(valores, PESOS_DIGITOS.primeiro);\r\n            const digitoDois = calcularDigitoVerificador([...valores, digitoUm], PESOS_DIGITOS.segundo);\r\n\r\n            const identificadorCompleto = `${corpo}${digitoUm}${digitoDois}`;\r\n            if (identificadorCompleto.length !== TamanhoIdentificador.Total) {\r\n                continue;\r\n            }\r\n            const padrao = usarAlfanumerico ? /^[0-9A-Z]{12}[0-9]{2}$/ : /^[0-9]{14}$/;\r\n            if (!padrao.test(identificadorCompleto)) {\r\n                continue;\r\n            }\r\n            if (verificarSequenciaRepetida(identificadorCompleto)) {\r\n                continue;\r\n            }\r\n\r\n            return {\r\n                puro: identificadorCompleto,\r\n                mascarado: aplicarMascara(identificadorCompleto),\r\n            };\r\n        }\r\n\r\n        throw new Error(\"Não foi possível gerar um identificador válido.\");\r\n    }\r\n\r\n    /**\r\n     * @summary Exibe um aviso temporário para o usuário com estilos adequados ao tipo.\r\n     * @param mensagem Texto exibido dentro do aviso.\r\n     * @param tipo Tipo do aviso a ser aplicado.\r\n     */\r\n    // Exibição de avisos reaproveitada via utilitário em ui.ts\r\n\r\n    /**\r\n     * @summary Copia um texto para a área de transferência do sistema.\r\n     * @param valor Texto que será copiado.\r\n     */\r\n    // Cópia para clipboard reaproveitada via utilitário em ui.ts\r\n\r\n    /**\r\n     * @summary Atualiza o campo principal de resultado considerando a máscara selecionada.\r\n     */\r\n    private atualizarCampoResultado(): void {\r\n        if (!this.cnpjAtual) {\r\n            return;\r\n        }\r\n\r\n        const { campoResultado, controleMascara } = this.elementos;\r\n        campoResultado.value = controleMascara?.checked\r\n            ? aplicarMascara(this.cnpjAtual)\r\n            : this.cnpjAtual;\r\n    }\r\n\r\n    /**\r\n     * @summary Gera um novo identificador, atualiza o campo de resultado e reinicia a contagem automática.\r\n     * @param disparoManual Indica se a geração foi solicitada manualmente pelo usuário.\r\n     */\r\n    private gerarEExibirIdentificador(disparoManual = false, disparoEmLote?: number): void {\r\n        // Impede novas gerações ao atingir o limite e interrompe a auto-regeneração\r\n        if (this.historico.itens.length >= this.historico.limite) {\r\n            exibirAviso(\r\n                this.elementos.areaAviso,\r\n                `Limite de ${this.historico.limite} CNPJs atingido. Não é possível gerar novos registros.`,\r\n                TipoAviso.Erro,\r\n            );\r\n\r\n            if (this.temporizadores.intervaloRegressivo !== undefined) {\r\n                window.clearInterval(this.temporizadores.intervaloRegressivo);\r\n            }\r\n\r\n            const { textoTempoRestante, barraProgresso } = this.elementos;\r\n            textoTempoRestante.textContent = \"Limite atingido\";\r\n            barraProgresso.style.transform = \"scaleX(0)\";\r\n            return;\r\n        }\r\n\r\n        const { campoResultado, controleMascara } = this.elementos;\r\n        const identificador = this.gerarIdentificadorValido();\r\n\r\n        this.cnpjAtual = identificador.puro;\r\n        campoResultado.value = controleMascara?.checked ? identificador.mascarado : identificador.puro;\r\n        this.adicionarAoHistorico(identificador.puro);\r\n\r\n        if (disparoManual)\r\n            exibirAviso(this.elementos.areaAviso, \"Novo CNPJ alfanumérico gerado\", TipoAviso.Sucesso);\r\n\r\n        if (disparoEmLote)\r\n            exibirAviso(\r\n                this.elementos.areaAviso,\r\n                `Novos ${disparoEmLote} CNPJs alfanuméricos gerados`,\r\n                TipoAviso.Sucesso,\r\n            );\r\n\r\n        this.temporizadores.inicioContagem = performance.now();\r\n        this.atualizarContagemRegressiva();\r\n\r\n        if (this.temporizadores.intervaloRegressivo !== undefined) {\r\n            window.clearInterval(this.temporizadores.intervaloRegressivo);\r\n        }\r\n\r\n        this.temporizadores.intervaloRegressivo = window.setInterval(\r\n            () => this.atualizarContagemRegressiva(),\r\n            IntervaloTemporizador.Atualizacao,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @summary Atualiza a contagem regressiva e o estado visual da barra de progresso.\r\n     */\r\n    private atualizarContagemRegressiva(): void {\r\n        const { textoTempoRestante, barraProgresso } = this.elementos;\r\n        const tempoDecorrido = performance.now() - this.temporizadores.inicioContagem;\r\n        const tempoRestante = IntervaloTemporizador.GeracaoAutomatica - tempoDecorrido;\r\n\r\n        if (tempoRestante <= 0) {\r\n            this.gerarEExibirIdentificador();\r\n            return;\r\n        }\r\n\r\n        textoTempoRestante.textContent = `Novo em ${(tempoRestante / 1_000).toFixed(1)}s`;\r\n        const fracaoRestante = Math.max(\r\n            0,\r\n            Math.min(1, 1 - tempoDecorrido / IntervaloTemporizador.GeracaoAutomatica),\r\n        );\r\n\r\n        barraProgresso.style.transform = `scaleX(${fracaoRestante})`;\r\n        barraProgresso.style.background = \"linear-gradient(to left, #bd93f9, #8b5cf6)\";\r\n    }\r\n\r\n    /**\r\n     * @summary Reinicia o histórico para o estado inicial vazio.\r\n     */\r\n    private inicializarHistorico(): void {\r\n        this.historico.itens = [];\r\n        this.atualizarVisualHistorico();\r\n    }\r\n\r\n    /**\r\n     * @summary Adiciona um novo identificador ao histórico, respeitando o limite configurado.\r\n     * @param novo Identificador puro recém-gerado.\r\n     */\r\n    private adicionarAoHistorico(novo: string): void {\r\n        if (this.historico.itens[0] === novo) {\r\n            return;\r\n        }\r\n\r\n        this.historico.itens.unshift(novo);\r\n        if (this.historico.itens.length > this.historico.limite) {\r\n            this.historico.itens.pop();\r\n        }\r\n        this.atualizarVisualHistorico();\r\n    }\r\n\r\n    /**\r\n     * @summary Renderiza o histórico de identificadores na interface.\r\n     */\r\n    private atualizarVisualHistorico(): void {\r\n        const { listaRecentes, controleMascara } = this.elementos;\r\n\r\n        if (!listaRecentes) {\r\n            this.atualizarEstadoBotaoCopiarTodos();\r\n            return;\r\n        }\r\n\r\n        listaRecentes.innerHTML = \"\";\r\n\r\n        this.historico.itens.forEach((puro) => {\r\n            const texto = controleMascara?.checked ? aplicarMascara(puro) : puro;\r\n            const item = document.createElement(\"li\");\r\n            item.className =\r\n                \"flex items-center justify-between gap-3 rounded-md ring-2 ring-slate-100 dark:ring-slate-800 dark:shadow-2xl px-3 py-1 hover:ring-zinc-200/50 transition-all duration-300 dark:hover:ring-slate-900 cursor-default\";\r\n\r\n            const rotulo = document.createElement(\"span\");\r\n            rotulo.className = \"ml-1 text-sm text-slate-600 font-semibold dark:text-zinc-50 break-words\";\r\n            rotulo.textContent = texto;\r\n\r\n            const botao = document.createElement(\"button\");\r\n            botao.className =\r\n                \"ml-1 inline-flex items-center justify-center rounded bg-transparent text-violet-500 transition-all dark:text-violet-500 dark:hover:text-violet-500 hover:violet-600 ease-in-out hover:text-violet-600 px-2 py-1 text-xs active:scale-75\";\r\n            botao.setAttribute(\"title\", \"Copiar esse CNPJ\");\r\n            botao.innerHTML = `\r\n                <svg class=\"w-6 h-6\" aria-hidden=\"true\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                    <path stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"1.5\"\r\n                        d=\"M9 8v3a1 1 0 0 1-1 1H5m11 4h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-7a1 1 0 0 0-1 1v1m4 3v10a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-7.13a1 1 0 0 1 .24-.65L7.7 8.35A1 1 0 0 1 8.46 8H13a1 1 0 0 1 1 1Z\" />\r\n                </svg>\r\n            `;\r\n\r\n            botao.addEventListener(\"click\", async (evento) => {\r\n                evento.preventDefault();\r\n                try {\r\n                    await copiarTexto(texto);\r\n                    exibirAviso(\r\n                        this.elementos.areaAviso,\r\n                        `CNPJ copiado: ${texto}`,\r\n                        TipoAviso.InfoAlternativo,\r\n                    );\r\n                } catch {\r\n                    exibirAviso(this.elementos.areaAviso, \"Falha ao copiar\", TipoAviso.Erro);\r\n                }\r\n            });\r\n\r\n            item.append(rotulo, botao);\r\n            listaRecentes.appendChild(item);\r\n        });\r\n\r\n        listaRecentes.scrollTop = 0;\r\n        this.atualizarEstadoBotaoCopiarTodos();\r\n    }\r\n\r\n    /**\r\n     * @summary Copia todos os itens presentes no histórico para a área de transferência.\r\n     */\r\n    private async copiarTodos(): Promise<void> {\r\n        if (this.historico.itens.length === 0) {\r\n            exibirAviso(this.elementos.areaAviso, \"Nenhum CNPJ no histórico.\", TipoAviso.Erro);\r\n            return;\r\n        }\r\n\r\n        const { controleMascara } = this.elementos;\r\n        const listaParaCopiar = this.historico.itens\r\n            .map((puro) => (controleMascara?.checked ? aplicarMascara(puro) : puro))\r\n            .join(\",\");\r\n\r\n        try {\r\n            await copiarTexto(listaParaCopiar);\r\n            if (this.historico.itens.length === 1) {\r\n                exibirAviso(\r\n                    this.elementos.areaAviso,\r\n                    `Copiado 1 CNPJ: ${listaParaCopiar}`,\r\n                    TipoAviso.InfoAlternativo,\r\n                );\r\n                return;\r\n            } else {\r\n                exibirAviso(\r\n                    this.elementos.areaAviso,\r\n                    `Copiados ${this.historico.itens.length} CNPJs separados por vírgula`,\r\n                    TipoAviso.Info,\r\n                );\r\n            }\r\n        } catch {\r\n            exibirAviso(this.elementos.areaAviso, \"Falha ao copiar todos.\", TipoAviso.Erro);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @summary Atualiza o estado visual e funcional do botão de copiar todos os itens do histórico.\r\n     */\r\n    private atualizarEstadoBotaoCopiarTodos(): void {\r\n        const { botaoCopiarTodos, contadorHistorico } = this.elementos;\r\n\r\n        const total = this.historico.itens.length;\r\n        const totalExibido = Math.min(total, this.historico.limite);\r\n\r\n        if (botaoCopiarTodos) {\r\n            botaoCopiarTodos.disabled = total === 0;\r\n            botaoCopiarTodos.classList.toggle(\"cursor-nao-permitido\", total === 0);\r\n            botaoCopiarTodos.classList.toggle(\"opacity-60\", total === 0);\r\n        }\r\n\r\n        if (contadorHistorico) {\r\n            if (total > 0) {\r\n                contadorHistorico.textContent = totalExibido.toString();\r\n                contadorHistorico.className =\r\n                    \"absolute mt-1.5 ml-2 inline-flex items-center justify-center rounded-lg p-2 bg-transparent text-slate-600 dark:text-zinc-50 text-xs font-bold w-6 h-6 border-2 border-zinc-600 dark:border-zinc-50 dark:border-zinc-50 cursor-default\";\r\n            } else {\r\n                contadorHistorico.textContent = \"\";\r\n                contadorHistorico.className = \"hidden\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // Efeito de onda movido para utilitário em ui.ts\r\n}\r\n\r\n/**\r\n * @summary Obtém um elemento obrigatório por id, lançando erro caso não exista.\r\n * @param id Identificador do elemento HTML desejado.\r\n * @returns Referência ao elemento encontrado.\r\n */\r\n// obterElementoObrigatorio reaproveitado de ui.ts\r\n\r\n// Bootstrap do gerador e do banner de cookies\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    if (!document.getElementById(\"aviso-cookies\")) {\r\n        document.body.insertAdjacentHTML(\"beforeend\", htmlCookies);\r\n    }\r\n    inicializarAvisoDeCookies();\r\n\r\n    const elementos: ElementosInterface = {\r\n        campoResultado: obterElementoObrigatorio<HTMLInputElement>(\"campo-resultado\"),\r\n        botaoGerar: obterElementoObrigatorio<HTMLButtonElement>(\"botao-gerar\"),\r\n        botaoGerar10: obterElementoObrigatorio<HTMLButtonElement>(\"botao-gerar-10\"),\r\n        botaoCopiar: obterElementoObrigatorio<HTMLButtonElement>(\"botao-copiar\"),\r\n        areaAviso: obterElementoObrigatorio<HTMLDivElement>(\"toast\"),\r\n        textoTempoRestante: obterElementoObrigatorio<HTMLDivElement>(\"tempo-restante\"),\r\n        barraProgresso: obterElementoObrigatorio<HTMLElement>(\"barra\"),\r\n        controleMascara: document.getElementById(\"toggle-mascara\") as HTMLInputElement | null,\r\n        controleAlfanumerico: document.getElementById(\"toggle-alfanumerico\") as HTMLInputElement | null,\r\n        listaRecentes: document.getElementById(\"lista-recentes\") as HTMLUListElement | null,\r\n        botaoCopiarTodos: document.getElementById(\"botao-copiar-todos\") as HTMLButtonElement | null,\r\n        contadorHistorico: document.getElementById(\"contador-historico\") as HTMLSpanElement | null,\r\n    };\r\n\r\n    void new GeradorCnpj(elementos);\r\n});\r\n\r\nexport { };\r\n"]}