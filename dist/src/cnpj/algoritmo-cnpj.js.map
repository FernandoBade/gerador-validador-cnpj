{"version":3,"file":"algoritmo-cnpj.js","sourceRoot":"","sources":["../../../src/cnpj/algoritmo-cnpj.ts"],"names":[],"mappings":"AAAA;;+BAE+B;AAE/B,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAE1D;;GAEG;AACH,MAAM,UAAU,2BAA2B,CAAC,SAAiB;IACzD,MAAM,MAAM,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAElC,IAAI,CAAC,MAAM,IAAI,UAAU,IAAI,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,CAAC,EAAE,CAAC;QAC7F,OAAO,MAAM,GAAG,UAAU,CAAC;IAC/B,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,8CAA8C,SAAS,EAAE,CAAC,CAAC;AAC/E,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,yBAAyB,CAAC,OAAiB,EAAE,KAAe;IACxE,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CACvB,CAAC,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,CAAC,SAAS,GAAG,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,EACzE,CAAC,CACJ,CAAC;IACF,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IACxB,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,0BAA0B,CAAC,KAAa;IACpD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,IAAY;IACxC,IAAI,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,KAAK;QAAE,OAAO,KAAK,CAAC;IAC7D,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;QAAE,OAAO,KAAK,CAAC;IACvD,IAAI,0BAA0B,CAAC,IAAI,CAAC;QAAE,OAAO,KAAK,CAAC;IAEnD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAM,GAAG,GAAG,yBAAyB,CAAC,OAAO,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;IACvE,MAAM,GAAG,GAAG,yBAAyB,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;IAChF,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;AACzC,CAAC;AAED,OAAO,EAAE,aAAa,EAAE,CAAC","sourcesContent":["/* ============================\r\n   Algoritmos do CNPJ\r\n============================ */\r\n\r\nimport { PESOS_DIGITOS } from \"../gerais/constantes.js\";\r\nimport { TamanhoIdentificador } from \"../gerais/enums.js\";\r\n\r\n/**\r\n * @summary Converte um caractere [0-9A-Z] em valor numérico para o módulo 11.\r\n */\r\nexport function converterCaractereParaValor(caractere: string): number {\r\n    const codigo = caractere.toUpperCase().charCodeAt(0);\r\n    const codigoZero = \"0\".charCodeAt(0);\r\n    const codigoNove = \"9\".charCodeAt(0);\r\n    const codigoA = \"A\".charCodeAt(0);\r\n    const codigoZ = \"Z\".charCodeAt(0);\r\n\r\n    if ((codigo >= codigoZero && codigo <= codigoNove) || (codigo >= codigoA && codigo <= codigoZ)) {\r\n        return codigo - codigoZero;\r\n    }\r\n    throw new Error(`Caractere inválido para CNPJ alfanumérico: ${caractere}`);\r\n}\r\n\r\n/**\r\n * @summary Calcula um dígito verificador pelo módulo 11.\r\n */\r\nexport function calcularDigitoVerificador(valores: number[], pesos: number[]): number {\r\n    const soma = valores.reduce(\r\n        (acumulado, valorAtual, indice) => acumulado + valorAtual * pesos[indice],\r\n        0,\r\n    );\r\n    const resto = soma % 11;\r\n    return resto < 2 ? 0 : 11 - resto;\r\n}\r\n\r\n/**\r\n * @summary Verifica se todos os caracteres de uma sequência são idênticos.\r\n */\r\nexport function verificarSequenciaRepetida(valor: string): boolean {\r\n    return valor.length > 0 && valor.split(\"\").every((c) => c === valor[0]);\r\n}\r\n\r\n/**\r\n * @summary Valida um CNPJ puro (14) quanto à forma e aos dígitos verificadores.\r\n */\r\nexport function validarCnpjPuro(puro: string): boolean {\r\n    if (puro.length !== TamanhoIdentificador.Total) return false;\r\n    if (!/^[0-9A-Z]{12}[0-9]{2}$/.test(puro)) return false;\r\n    if (verificarSequenciaRepetida(puro)) return false;\r\n\r\n    const corpo = puro.slice(0, 12);\r\n    const valores = Array.from(corpo).map((ch) => converterCaractereParaValor(ch));\r\n    const dv1 = calcularDigitoVerificador(valores, PESOS_DIGITOS.primeiro);\r\n    const dv2 = calcularDigitoVerificador([...valores, dv1], PESOS_DIGITOS.segundo);\r\n    return puro.endsWith(`${dv1}${dv2}`);\r\n}\r\n\r\nexport { PESOS_DIGITOS };\r\n"]}